import type { NextPage } from 'next';
import Head from 'next/head';
import { useSession } from 'next-auth/react';
import useSWR from 'swr';
import React, { useEffect, useMemo, useState } from 'react';
import axios from 'axios';
import Select from 'react-select';

import Nav from '../components/nav';
import getaxios from '../utils/getaxios';
import Link from 'next/link';

const portugueseMonths = [
  'Janeiro',
  'Fevereiro',
  'Março',
  'Abril',
  'Maio',
  'Junho',
  'Julho',
  'Agosto',
  'Setembro',
  'Outubro',
  'Novembro',
  'Dezembro',
];

const Profile: NextPage = () => {
  const { data: session, status: loading } = useSession();

  const [isTeacher, setIsTeacher] = useState(false);
  const [name, setName] = useState(null);
  const [email, setEmail] = useState(null);
  const [cellphone, setCellphone] = useState(null);
  const [courses, setCourses] = useState(null);
  const [availableLocations, setAvailableLocations] = useState(null);
  const [monday, setMonday] = useState(null);
  const [tuesday, setTuesday] = useState(null);
  const [wednesday, setWednesday] = useState(null);
  const [thursday, setThursday] = useState(null);
  const [friday, setFriday] = useState(null);
  const [loggedUserWithoutAccount, setLoggedUserWithoutAccount] = useState(false);
  const [errorCount, setErrorCount] = useState(0);
  const [showStudent, setShowStudent] = useState(false);
  const [showTeacher, setShowTeacher] = useState(false);

  const { data, error } = useSWR(!loggedUserWithoutAccount ? `/api/user/${session?.user?.email}`
  : null, getaxios);

  const studentAppointments = useMemo(
    () =>
      data?.data?.appointments?.filter(
        (appointment) => appointment.teacher_email !== session?.user?.email
      ),
    [data]
  );

  const teacherAppointments = useMemo(
    () =>
      data?.data?.appointments?.filter(
        (appointment) => appointment.teacher_email === session?.user?.email
      ),
    [data]
  );

  useEffect(() => {
    setErrorCount((prevstate) => prevstate + 1);
    if (error && errorCount === 2) setLoggedUserWithoutAccount(true);
  }, [error, setErrorCount]);

  const dayWeekValidation = (dayOfTheWeek) => {
    if (dayOfTheWeek) {
      return dayOfTheWeek.split(',').map((item) => item.trim()).map((item) => parseInt(item));
    } else return;
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const available_hours = {
      monday: dayWeekValidation(monday),
      tuesday: dayWeekValidation(tuesday),
      wednesday: dayWeekValidation(wednesday),
      thursday: dayWeekValidation(thursday),
      friday: dayWeekValidation(friday)
    };

    for (const dayOfTheWeek in available_hours) {
      if (!available_hours[dayOfTheWeek]) delete available_hours[dayOfTheWeek];
    };

    console.log(available_hours);

    const data = {
      name,
      email,
      cellphone,
      teacher: isTeacher,
      courses: courses?.split(',').map((item) => item.trim()),
      available_locations: availableLocations?.split(',').map((item) => item.trim()),
      available_hours
    };
    try {
      await axios.post(`${process.env.NEXT_PUBLIC_URL}/api/user`, data);
      setLoggedUserWithoutAccount(false);
    } catch (err: any) {
      alert(err.response.data.error);
    }
  };

  const options = [
    { value: 'yes', label: 'Sim' },
    { value: 'no', label: 'Não' }
  ];

  const onChangeSelect = (value: any) => {
    let selected = value.value;
    if (selected === 'yes') {
      setIsTeacher(true);
    } else if (selected === 'no') {
      setIsTeacher(false);
    }
  };

  return (
    <>
      <Head>
        <title>Profile Page</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main>
        {loading === 'loading' && (
          <div>
            CARREGANDO
          </div>
        )}
        {!session && (
          <div>
            <Nav />
            Você não está logado. <br />
            Favor fazer o login para acessar essa página. <br />
          </div>
        )}
        {session && data && (
          <>
          <Nav />
          <p>
            Olá, {data.data.name}
          </p>
          <p>
            E-mail: {data.data.email}
          </p>
          <p>
            Telefone: {data.data.cellphone}
          </p>
          <div>
            <button onClick={() => setShowStudent((prevState) => !prevState)}>
              <span>Veja suas informações como aluno:</span>
            </button>
          </div>
          {showStudent && (
            <div>
              <p>Seus agendamentos:</p>
              <div>
                {studentAppointments.map((appointment) => (
                  <div key={appointment.date} className="mb-2">
                    <p>{appointment.course}:</p>
                    <div>
                      <div>
                        <Link href={`/search/${appointment.teacher_id}`}>
                          <a>
                            <p>{appointment.teacher_name}</p>
                          </a>
                        </Link>
                      </div>
                      <div>
                        <p>
                          {`${new Date(appointment.date).getDate()} de ${
                            portugueseMonths[
                              new Date(appointment.date).getMonth()
                            ]
                          } de ${new Date(
                            appointment.date
                          ).getFullYear()} ${new Date(
                            appointment.date
                          ).getHours()}:00`}
                        </p>
                      </div>
                      <div

                        onClick={() => {
                          appointment.appointment_link &&
                            alert(
                              'Link da reunião: ' + appointment.appointment_link
                            );
                        }}
                      >
                        <p

                        >
                          {appointment.location}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div>
            <button onClick={() => setShowTeacher((prevState) => !prevState)}>
              <span>Veja suas informações como professor:</span>
            </button>
          </div>
          {showTeacher && (
            <>
              <div>
                <p>Seus agendamentos:</p>
                <div>
                  {teacherAppointments.map((appointment) => (
                    <div key={appointment.date} className="mb-2">
                      <p>{appointment.course}:</p>
                      <div>
                        <div>
                          <Link href={`/search/${appointment.teacher_id}`}>
                            <a>
                              <p>{appointment.teacher_name}</p>
                            </a>
                          </Link>
                        </div>
                        <div>
                          <p>
                            {`${new Date(appointment.date).getDate()} de ${
                              portugueseMonths[
                                new Date(appointment.date).getMonth()
                              ]
                            } de ${new Date(
                              appointment.date
                            ).getFullYear()} ${new Date(
                              appointment.date
                            ).getHours()}:00`}
                          </p>
                        </div>
                        <div
                          onClick={() => {
                            appointment.appointment_link &&
                              alert(
                                'Link da reunião: ' +
                                  appointment.appointment_link
                              );
                          }}
                        >
                          <p>{appointment.location}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              <div>
                <span>
                  Sua disponibilidade
                </span>
              </div>
              <div>
                <div>
                  <div>
                    <p>Disciplinas:</p>
                    <div>
                      <div>
                        <p>{data.data.courses.join(', ')}</p>
                      </div>
                    </div>
                  </div>

                  <div>
                    <p>Locais:</p>
                    <div >
                      <div >
                        <p>{data.data.available_locations.join(', ')}</p>
                      </div>
                    </div>
                  </div>

                  <div>
                    <p>Horários:</p>
                    <div>
                      <div>
                        <p>Segunda</p>
                      </div>
                      <div>
                        <p>
                          {data.data.available_hours?.monday?.join(', ') ||
                            'Não disponível'}
                        </p>
                      </div>
                    </div>

                    <div>
                      <div>
                        <p>Terça</p>
                      </div>
                      <div>
                        <p>
                          {data.data.available_hours?.tuesday?.join(', ') ||
                            'Não disponível'}
                        </p>
                      </div>
                    </div>

                    <div>
                      <div>
                        <p>Quarta</p>
                      </div>
                      <div>
                        <p>
                          {data.data.available_hours?.wednesday?.join(', ') ||
                            'Não disponível'}
                        </p>
                      </div>
                    </div>

                    <div >
                      <div>
                        <p>Quinta</p>
                      </div>
                      <div>
                        <p>
                          {data.data.available_hours?.thursday?.join(', ') ||
                            'Não disponível'}
                        </p>
                      </div>
                    </div>

                    <div>
                      <div>
                        <p>Sexta</p>
                      </div>
                      <div>
                        <p>
                          {data.data.available_hours?.friday?.join(', ') ||
                            'Não disponível'}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          )}
          </>

        )}
        {loggedUserWithoutAccount && session && (
          <div>
            <Nav />
            <h1>Seja bem vindo ao Schedule Classes!</h1>
            <h2>Por favor, finalize a criação do seu perfil preenchendo as seguintes informações:</h2>
            <form onSubmit={handleSubmit}>
            <label>Digite seu nome completo:</label>
              <input type='text' value={name!} onChange={(e) => setName(e.target.value)} placeholder='Nome Sobrenome'/>
              <label>Digite seu e-mail:</label>
              <input type='email' value={email!} onChange={(e) => setEmail(e.target.value)} placeholder='exemplo@exemplo.com.br'/>
              <label>Digite o seu telefone, incluindo o DDD (somente números):</label>
              <input type='cellphone' value={cellphone!} onChange={(e) => setCellphone(e.target.value)} placeholder='Exemplo: 11988776655'/>
              <div>
                <label>Você é um professor?</label>
                <Select defaultValue={options[1]} options={options} onChange={onChangeSelect} isSearchable={false}/>
              </div>

              {isTeacher && (
                <>
                  <label>Escreva as matérias que vai lecionar (separadas pos vírgula):</label>
                  <input type='text' value={courses!} onChange={(e) => setCourses(e.target.value)} placeholder='Materia 1, Materia 2...'/>
                  <label>Escreva os locais aonde você pode lecionar (separads pos vírgula):</label>
                  <input type='text' value={availableLocations!} onChange={(e) => setAvailableLocations(e.target.value)} placeholder='Em casa, on-line, Sala 01...'/>
                  <label>Escreva os horários que você pode lecionar (separads pos vírgula)</label>
                  <label>Para sua segurança, não é permitido lecionar das 21h às 6h</label>
                  <label>Segunda:</label>
                  <input type='text' value={monday!} onChange={(e) => setMonday(e.target.value)} placeholder='8, 10, 11, 14...'/>
                  <label>Terça:</label>
                  <input type='text' value={tuesday!} onChange={(e) => setTuesday(e.target.value)} placeholder='8, 10, 11, 14...'/>
                  <label>Quarta:</label>
                  <input type='text' value={wednesday!} onChange={(e) => setWednesday(e.target.value)} placeholder='8, 10, 11, 14...'/>
                  <label>Quinta:</label>
                  <input type='text' value={thursday!} onChange={(e) => setThursday(e.target.value)} placeholder='8, 10, 11, 14...'/>
                  <label>Sexta:</label>
                  <input type='text' value={friday!} onChange={(e) => setFriday(e.target.value)} placeholder='8, 10, 11, 14...'/>
                </>
              )}
              <button type='submit'>Criar perfil</button>
            </form>
          </div>
        )}
      </main>

      <footer>
        <p>All rights reserved.</p>
      </footer>
    </>
  );
};

export default Profile;
